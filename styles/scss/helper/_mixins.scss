@mixin text-shadow(
	$h: 1,
	$v: 1,
	$b: 2,
	$shadow-color: rgba($color-grey-base, 0.3)
) {
	text-shadow: #{$h}px #{$h}px #{$h}px $shadow-color;
}
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}
@mixin mp-reset($margin: 0, $padding: 0) {
	margin: $margin;
	padding: $padding;
}
@mixin off-screen {
	position: absolute !important;
	top: -9999px !important;
	left: -9999px !important;
}
@mixin float($direction: left, $width: 100%) {
	float: $direction;
	width: $width;
	overflow: hidden;
}
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}
@mixin extend {
	padding-bottom: 9999px;
	margin-bottom: -9999px;
}
@mixin cover {
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	position: absolute;
}
@mixin centered($horizontal: true, $vertical: true) {
	position: absolute;
	@if ($horizontal and $vertical) {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	} @else if ($horizontal) {
		left: 50%;
		transform: translate(-50%, 0);
	} @else if ($vertical) {
		top: 50%;
		transform: translate(0, -50%);
	}
}
@mixin vertical-align($position: relative, $top: 50%) {
	@if $position == "reset" {
		top: auto;
		-webkit-transform: translateY(0);
		-ms-transform: translateY(0);
		transform: translateY(0);
	} @else {
		position: $position;
		top: $top;
		-webkit-transform: translateY(-$top);
		-ms-transform: translateY(-$top);
		transform: translateY(-$top);
	}
}
@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);

		@if $i and
			$i +
			1 <=
			length($args) and
			type-of(nth($args, $i + 1)) ==
			number
		{
			#{$o}: nth($args, $i + 1);
		}
	}
	position: $position;
}
@mixin absolute($args) {
	@include position(absolute, $args);
}
@mixin fixed($args) {
	@include position(fixed, $args);
}
@mixin relative($args) {
	@include position(relative, $args);
}
@mixin border($style, $color, $sides) {
	@if ($style != "") {
		@if ($sides == "") {
			border: $style $color;
		} @else {
			@each $side in $sides {
				@if (
					$side ==
						"top" or
						$side ==
						"right" or
						$side ==
						"bottom" or
						$side ==
						"left"
				) {
					border-#{$side}: $style $color;
				}
			}
		}
	}
}
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}

	@return $string;
}
@mixin font-face(
	$name,
	$path,
	$weight: null,
	$style: null,
	$exts: eot woff2 woff ttf svg
) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_"),
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype",
	);

	@each $ext in $exts {
		$extmod: if(
			map-has-key($extmods, $ext),
			$ext + map-get($extmods, $ext),
			$ext
		);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append(
			$src,
			url(quote($path + "." + $extmod)) format(quote($format)),
			comma
		);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}
@function em-calc($values, $elFontSize: $baseFontSize) {
	$list: ();

	@each $value in $values {
		@if ($value == 0 or $value == auto) {
			$list: append($list, $value);
		} @else {
			$emValue: ($value/$elFontSize) + em;
			$list: append($list, $emValue);
		}
	}
	@return $list;
}

@function rem-calc($values, $elFontSize: 16) {
	$list: ();

	@each $value in $values {
		@if ($value == 0 or $value == auto) {
			$list: append($list, $value);
		} @else {
			$remValue: ($value/$elFontSize) + rem;
			$list: append($list, $remValue);
		}
	}
	@return $list;
}

// Animations

// =============================================================================
//  Keyframes
// =============================================================================

// =============================================================================
//  Polyfill images for IE
//      https://github.com/fregante/object-fit-images
//
//  .your-favorite-image {
// 	    object-fit: cover;
// 	    object-position: bottom;
// 	    font-family: 'object-fit: cover; object-position: bottom;';
//  }
// =============================================================================

@mixin object-fit($fit: fill, $position: null) {
	-o-object-fit: $fit;
	object-fit: $fit;
	@if $position {
		-o-object-position: $position;
		object-position: $position;
		font-family: "object-fit: #{$fit}; object-position: #{$position}";
	} @else {
		font-family: "object-fit: #{$fit}";
	}
}

// =============================================================================
// Auto-prefixers
// =============================================================================
// If you are using the time function and no animation setting thenthe default will be 'ease'.
@mixin transition($property, $time: null, $animation: null) {
	@if $time != null {
		transition: $property $time $animation;
		-o-transition: $property $time $animation;
		-ms-transition: $property $time $animation;
		-moz-transition: $property $time $animation;
		-webkit-transition: $property $time $animation;
	} @else {
		transition: $property $transition-time-ease;
		-o-transition: $property $transition-time-ease;
		-ms-transition: $property $transition-time-ease;
		-moz-transition: $property $transition-time-ease;
		-webkit-transition: $property $transition-time-ease;
	}
}

// generic transform
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin translateX($transforms) {
	-moz-transform: translateX($transforms);
	-o-transform: translateX($transforms);
	-ms-transform: translateX($transforms);
	-webkit-transform: translateX($transforms);
	transform: translateX($transforms);
}

// rotate
@mixin rotate($deg) {
	@include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
	@include transform(scale($scale));
}
// translate
@mixin translate($x, $y) {
	@include transform(translate($x, $y));
}
// skew
@mixin skew($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin($origin) {
	-moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}
// =============================================================================
// Triangles
// =============================================================================

@mixin triangle($size, $color, $direction) {
	height: 0;
	width: 0;

	border-color: transparent;
	border-style: solid;
	border-width: $size / 2;

	@if $direction == up {
		border-bottom-color: $color;
	} @else if $direction == right {
		border-left-color: $color;
	} @else if $direction == down {
		border-top-color: $color;
	} @else if $direction == left {
		border-right-color: $color;
	} @else {
		@error "Unknown direction #{$direction}.";
	}
}

// =============================================================================
// Triangles, Chevrons & Arrows
// =============================================================================
@mixin triangle($size, $color, $direction) {
	height: 0;
	width: 0;

	border-color: transparent;
	border-style: solid;
	border-width: $size / 2;

	@if $direction == up {
		border-bottom-color: $color;
	} @else if $direction == right {
		border-left-color: $color;
	} @else if $direction == down {
		border-top-color: $color;
	} @else if $direction == left {
		border-right-color: $color;
	} @else {
		@error "Unknown direction #{$direction}.";
	}
}
@mixin chevron($size, $color, $direction, $translate: "null") {
	border: solid $color;
	border-width: rem-calc(0 ($size * 0.8) ($size * 0.8) 0);
	// display: inline-block;
	padding: rem-calc($size);

	@if ($translate == "null") {
		@if $direction == up {
			transform: rotate(-135deg);
			-webkit-transform: rotate(-135deg);
		} @else if $direction == right {
			transform: rotate(-45deg);
			-webkit-transform: rotate(-45deg);
		} @else if $direction == down {
			transform: rotate(45deg);
			-webkit-transform: rotate(45deg);
		} @else if $direction == left {
			transform: rotate(135deg);
			-webkit-transform: rotate(135deg);
		} @else {
			@error "Unknown direction #{$direction}.";
		}
	} @else {
		@if $direction == up {
			transform: rotate(-135deg) translateY(rem-calc($translate));
			-webkit-transform: rotate(-135deg) translateY(rem-calc($translate));
		} @else if $direction == right {
			transform: rotate(-45deg) translateY(rem-calc($translate));
			-webkit-transform: rotate(-45deg) translateY(rem-calc($translate));
		} @else if $direction == down {
			transform: rotate(45deg) translateY(rem-calc($translate));
			-webkit-transform: rotate(45deg) translateY(rem-calc($translate));
		} @else if $direction == left {
			transform: rotate(135deg) translateY(rem-calc($translate));
			-webkit-transform: rotate(135deg) translateY(rem-calc($translate));
		} @else {
			@error "Unknown direction #{$direction}.";
		}
	}
}

@mixin buttonArrow(
	$position: absolute,
	$colour: inherit,
	$fontsize: 18,
	$fontweight: $bold,
	$top: 13,
	$right: -20
) {
	content: "â†’";
	position: $position;
	color: $colour;
	font-size: rem-calc($fontsize);
	font-weight: $fontweight;
	font-family: "system-ui", monospace;
	top: rem-calc($top);
	right: rem-calc($right);
	left: auto;
	// pointer-events: none;
}

// =============================================================================
// Underlined
// =============================================================================
@mixin underlined($colour: inherit, $width: 100%) {
	content: "";
	position: absolute;
	bottom: 0;
	background-color: $colour;
	width: $width;
	height: rem-calc(3);
	left: 0;
}
